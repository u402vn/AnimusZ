#include "MapTilesImporter.h"
#include <QDir>
#include <QSqlDatabase>
#include <QSqlQuery>
#include <QSqlError>
#include <QVariant>
#include <QDebug>

MapTilesImporter::MapTilesImporter(QObject *parent) : QObject(parent)
{

}

void MapTilesImporter::importMapFromMapnikFiles(const QString &destDB, const QString &srcFolderName, int sourceId)
{
    qDebug() << "Import Tiles Started";
    QSqlDatabase destinationDatabase = QSqlDatabase::addDatabase("QSQLITE", "TileFilesDestDB");
    destinationDatabase.setDatabaseName(destDB);
    destinationDatabase.open();
    QSqlQuery destDBQuery(destinationDatabase);
    destDBQuery.exec("CREATE TABLE MapTile (x INTEGER, y INTEGER, scale INTEGER, sourceId INTEGER, format INTEGER, autogenerated INTEGER, datetime REAL, signature INTEGER, tile BLOB)");

    QSqlQuery insertQuery(destinationDatabase);
    insertQuery.prepare("INSERT INTO MapTile (x, y, scale, sourceId, format, tile) " \
                        "VALUES (?, ?, ?, ?, ?, ?)");

    destinationDatabase.transaction();

    qint64 processedCount = 0;
    //Root
    QDir rootDir(srcFolderName);
    QStringList zFolderNames = rootDir.entryList(QDir::AllDirs | QDir::NoDotAndDotDot, QDir::Time);
    foreach (const QString &zFolderName, zFolderNames)
    {
        int z = zFolderName.toInt();
        QString fullZFolderName = srcFolderName + "\\" + zFolderName;
        QDir zDir(fullZFolderName);
        QStringList xFolderNames = zDir.entryList(QDir::AllDirs | QDir::NoDotAndDotDot, QDir::Time);

        foreach (const QString &xFolderName, xFolderNames)
        {
            int x = xFolderName.toInt();
            QString fullXFolderName = fullZFolderName + "\\" + xFolderName;
            QDir xDir(fullXFolderName);

            QStringList yFileNames = xDir.entryList(QDir::Files);
            foreach (const QString &yFileName, yFileNames)
            {
                QString yStr = yFileName;
                int y = yStr.section(".", 0, 0).toInt();

                QString extension = yStr.section('.', -1).toUpper();
                int tileFormat = 0;
                if (extension == "JPEG" || extension == "JPG")
                    tileFormat = 1;
                else if (extension == "PNG")
                    tileFormat = 2;

                QString fullYFileName = fullXFolderName + "\\" + yFileName;
                QFile file(fullYFileName);
                if (tileFormat != 0 && file.open(QIODevice::ReadOnly))
                {
                    QByteArray blob = file.readAll();

                    insertQuery.addBindValue(x);
                    insertQuery.addBindValue(y);
                    insertQuery.addBindValue(z);
                    insertQuery.addBindValue(sourceId);
                    insertQuery.addBindValue(tileFormat);
                    insertQuery.addBindValue(blob);

                    insertQuery.exec();

                    processedCount++;

                    if (processedCount % 5000 == 0)
                        qDebug() << "Import Tiles Progress:" << processedCount;
                }
            }
        }
    }


    destinationDatabase.commit();

    destDBQuery.exec("CREATE UNIQUE INDEX TILE_SCALE_X_Y_SourceID ON MapTile (x, y, scale, sourceId)");

    destinationDatabase.close();
    QSqlDatabase::removeDatabase("TileFilesDestDB");

    qDebug() << "Import Tiles Finished";

}

void MapTilesImporter::importMapFromSASFiles(const QString &destDB, const QString &srcFolderName, int sourceId)
{
    qDebug() << "Import Tiles Started";
    QSqlDatabase destinationDatabase = QSqlDatabase::addDatabase("QSQLITE", "TileFilesDestDB");
    destinationDatabase.setDatabaseName(destDB);
    destinationDatabase.open();
    QSqlQuery destDBQuery(destinationDatabase);
    destDBQuery.exec("CREATE TABLE MapTile (x INTEGER, y INTEGER, scale INTEGER, sourceId INTEGER, format INTEGER, autogenerated INTEGER, datetime REAL, signature INTEGER, tile BLOB)");
    //qDebug() << "SqLite error:" << destDBQuery.lastError().text() << ", SqLite error code:" << destDBQuery.lastError().number();

    //destDBQuery.exec("PRAGMA journal_mode = MEMORY");

    QSqlQuery insertQuery(destinationDatabase);
    // autogenerated, datetime, signature
    insertQuery.prepare("INSERT INTO MapTile (x, y, scale, sourceId, format, tile) " \
                        "VALUES (?, ?, ?, ?, ?, ?)");

    destinationDatabase.transaction();

    qint64 processedCount = 0;
    //Root
    QDir rootDir(srcFolderName);
    QStringList zFolderNames1 = rootDir.entryList(QDir::AllDirs | QDir::NoDotAndDotDot, QDir::Time);
    foreach (const QString &zFolderName1, zFolderNames1)
    {
        //Z - level 1
        QString zStr = zFolderName1;
        int z = zStr.remove(0, 1).toInt() - 1;
        QString fullZFolderName1 = srcFolderName + "\\" + zFolderName1;
        QDir zDir1(fullZFolderName1);
        QStringList zFolderNames2 = zDir1.entryList(QDir::AllDirs | QDir::NoDotAndDotDot, QDir::Time);
        foreach (const QString &zFolderName2, zFolderNames2)
        {
            // Z - level 2
            QString fullZFolderName2 = fullZFolderName1 + "\\" + zFolderName2;
            QDir zDir2(fullZFolderName2);
            QStringList xFolderNames1 = zDir2.entryList(QDir::AllDirs | QDir::NoDotAndDotDot, QDir::Time);
            foreach (const QString &xFolderName1, xFolderNames1)
            {
                // X - level 1
                QString xStr = xFolderName1;
                int x = xStr.remove(0, 1).toInt();
                QString fullXFolderName1 = fullZFolderName2 + "\\" + xFolderName1;
                QDir xDir1(fullXFolderName1);
                QStringList xFolderNames2 = xDir1.entryList(QDir::AllDirs | QDir::NoDotAndDotDot, QDir::Time);
                foreach (const QString &xFolderName2, xFolderNames2)
                {
                    // X - level 2
                    QString fullXFolderName2 = fullXFolderName1 + "\\" + xFolderName2;
                    QDir xDir2(fullXFolderName2);
                    QStringList yFileNames = xDir2.entryList(QDir::Files);
                    foreach (const QString &yFileName, yFileNames)
                    {
                        QString yStr = yFileName;
                        int y = yStr.section(".", 0, 0).remove(0, 1).toInt();

                        QString extension = yStr.section('.', -1).toUpper();
                        int tileFormat = 0;
                        if (extension == "JPEG" || extension == "JPG")
                            tileFormat = 1;
                        else if (extension == "PNG")
                            tileFormat = 2;

                        QString fullYFileName = fullXFolderName2 + "\\" + yFileName;
                        QFile file(fullYFileName);
                        if (tileFormat != 0 && file.open(QIODevice::ReadOnly))
                        {
                            QByteArray blob = file.readAll();

                            insertQuery.addBindValue(x);
                            insertQuery.addBindValue(y);
                            insertQuery.addBindValue(z);
                            insertQuery.addBindValue(sourceId);
                            insertQuery.addBindValue(tileFormat);
                            insertQuery.addBindValue(blob);

                            insertQuery.exec();

                            processedCount++;

                            if (processedCount % 5000 == 0)
                                qDebug() << "Import Tiles Progress:" << processedCount;
                        }
                    }
                }
            }
        }
    }

    destinationDatabase.commit();

    destDBQuery.exec("CREATE UNIQUE INDEX TILE_SCALE_X_Y_SourceID ON MapTile (x, y, scale, sourceId)");

    destinationDatabase.close();
    QSqlDatabase::removeDatabase("TileFilesDestDB");

    qDebug() << "Import Tiles Finished";
}
